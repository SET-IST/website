name: Deploy to Production

on:
  pull_request:
    types:
      - closed
    branches:
      - production
  workflow_dispatch:

jobs:
  build:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged)
    runs-on: ubuntu-latest
    steps:
      - name: set environment variables
        run: |
          # DATABASE
          echo DATABASE_URL="postgresql://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}/${{ vars.DB_NAME_PROD }}?schema=public" >> env

          # EDGE STORE
          echo EDGE_STORE_BASE_URL="${{ vars.ES_BASE_URL }}" >> env
          echo EDGE_STORE_JWT_SECRET="${{ secrets.ES_SECRET }}" >> env

          # AWS S3
          echo ES_AWS_ACCESS_KEY_ID="${{ vars.S3_KEY }}" >> env
          echo ES_AWS_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET }}" >> env
          echo ES_AWS_BUCKET_NAME="${{ vars.S3_BUCKET }}" >> env
          echo ES_AWS_REGION="${{ vars.S3_REGION }}" >> env

          # AUTHENTICATION
          echo NEXTAUTH_URL="${{ vars.NEXTAUTH_URL_PROD }}" >> env
          echo NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" >> env

          echo GOOGLE_CLIENT_ID="${{ vars.GOOGLE_CLIENT_ID }}" >> env
          echo GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" >> env

          echo FENIX_ID="${{ vars.FENIX_CLIENT_ID_PROD }}" >> env
          echo FENIX_SECRET="${{ secrets.FENIX_CLIENT_SECRET_PROD }}" >> env
          echo FENIX_URL="${{ vars.FENIX_CLIENT_URL_PROD }}" >> env

      - name: upload env artifact
        uses: actions/upload-artifact@v3
        with:
          name: Environment
          path: env
          retention-days: 1
      - name: checkout repo
        uses: actions/checkout@v3
      - uses: tenhaus/get-release-or-tag@v2
        id: tag
      - name: Docker Login
        # You may pin to the exact commit or the version.
        # uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        uses: docker/login-action@v2.1.0
        with:
          #registry: index.docker.io # optional
          username: ${{ secrets.DOCKER_USER }} # optional
          password: ${{ secrets.DOCKER_TOKEN }} # optional
          # Specifies whether the given registry is ECR (auto, true or false)
          ecr: false # optional, default is auto
          # Log out from the Docker registry at the end of a job
          logout: false # optional, default is true
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        uses: docker/build-push-action@v6
        with:
          file: Dockerfile
          push: true
          # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
          #secrets: # optional
          # List of tags
          #"${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:${GITHUB_REF#refs/*/}"
          #"${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:latest"
          #"${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:v0.0.0"
          build-args: |
            "NEXT_PUBLIC_API_BASE_URL=${{ vars.API_ENDPOINT_PROD }}"
            "NEXT_PUBLIC_EVENT_DATES=${{ vars.EVENT_DATES }}"
            "NEXT_PUBLIC_PREPARE_NEXT_EDITION=${{ vars.PREPARE_NEXT_EDITION_PROD }}"
          tags: |
            "${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:latest-prod"
            "${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:${{ steps.tag.outputs.tag }}"
      - name: upload prisma schema artifact
        uses: actions/upload-artifact@v3
        with:
          name: PrismaSchema
          path: database/prisma/schema.prisma
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create ssh identity
        run: echo "${{ secrets.PRIVATE_KEY }}" > ./id_rsa
      - name: Change privateKey perms
        run: chmod 400 ./id_rsa
      - name: Download Environment
        uses: actions/download-artifact@v3
        with:
          name: Environment
      - name: Download Prisma Schema
        uses: actions/download-artifact@v3
        with:
          name: PrismaSchema
      - name: copy env to destination
        run: scp -o StrictHostKeyChecking=no -i ./id_rsa ./env ubuntu@set.vps.tecnico.ulisboa.pt:~/env-prod
      - name: copy prisma schema to destination
        run: scp -o StrictHostKeyChecking=no -i ./id_rsa ./schema.prisma ubuntu@set.vps.tecnico.ulisboa.pt:~/schema.prisma-prod
      - name: Reload Deployment
        run: ssh -o StrictHostKeyChecking=no -i ./id_rsa ubuntu@set.vps.tecnico.ulisboa.pt sudo /home/ubuntu/deploy-prod.sh ${{ secrets.DOCKER_USER }}/${{ secrets.DOCKER_REPO }}:latest-prod
