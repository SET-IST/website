// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  Student
  Company
  Staff
}

enum CompanyCategory {
  Platinum
  Gold
  Silver
}

// Add activities to students
model StudentDetails {
  id                 Int                  @id @default(autoincrement())
  cvLocation         String?              @db.VarChar(128)
  scans              Int                  @default(0)
  points             Int                  @default(0)
  course             String               @db.VarChar(128)
  university         String               @db.VarChar(128)
  companies_ids      String[]
  companies          CompanyDetails[]
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @unique
  awardToken         AwardToken?
  reedems            Int                  @default(0)
  enrolledActivities ActivityEnrollment[]
}

// add activities to companies
model CompanyDetails {
  id         Int              @id @default(autoincrement())
  category   CompanyCategory
  username   String           @unique
  password   String
  students   StudentDetails[]
  activities Activity[]
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @unique

  description String  @db.VarChar(150)
  linkHref    String?
  linkText    String? @db.VarChar(40)

  // The days this company will be present at the event
  days Day[]
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  readChangelog  Boolean         @default(true)
  accounts       Account[]
  sessions       Session[]
  role           UserType        @default(Student) //custom relation for roles of student and company
  studentDetails StudentDetails? //custom table with aditional info of student
  companyDetails CompanyDetails? //custom table with aditional info of company
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//create the activity model
enum ActivityType {
  Lecture
  Workshop
  SpeedInterview
}

model ActivityEnrollment {
  userId     String
  student    StudentDetails @relation(fields: [userId], references: [userId])
  activityId Int
  activity   Activity       @relation(fields: [activityId], references: [id])
  confirmed  Boolean

  @@unique(name: "enrollmentId", [userId, activityId])
}

model Activity {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(60)
  description String       @db.VarChar(128)
  date        DateTime
  duration    Int
  location    String       @db.VarChar(60)
  type        ActivityType

  companies CompanyDetails[]

  enrollments ActivityEnrollment[]
}

// create the QRCode model
enum ObjectType {
  COMPANY
  REDEEM
}

model qrCode {
  id         String     @id @default(uuid())
  objectId   String
  objectType ObjectType

  @@map("QRCode")
}

enum AwardType {
  NORMAL
  SPECIAL
}

model AwardToken {
  id        String         @id @default(uuid())
  type      AwardType
  studentId Int            @unique
  student   StudentDetails @relation(fields: [studentId], references: [id])
}

model Day {
  id        Int              @id @default(autoincrement())
  dateCode  String           @unique
  companies CompanyDetails[]
}
